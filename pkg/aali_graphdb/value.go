// Copyright (C) 2025 ANSYS, Inc. and/or its affiliates.
// SPDX-License-Identifier: MIT
//
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by internal/gen/value/gen.go; DO NOT EDIT.

package aali_graphdb

import (
	"encoding/json"
	"fmt"
	"time"

	"cloud.google.com/go/civil"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// This is the interface to implement on any kuzu value, to indicate that it is such.
type Value interface {
	IsKuzuValue()
}

// Keep all the tags of the values in 1 place. This is especially useful for unmarshaling.
type valueTag string

const (
	nullValTag         valueTag = "Null"
	boolValTag         valueTag = "Bool"
	int64ValTag        valueTag = "Int64"
	int32ValTag        valueTag = "Int32"
	int16ValTag        valueTag = "Int16"
	int8ValTag         valueTag = "Int8"
	uint64ValTag       valueTag = "UInt64"
	uint32ValTag       valueTag = "UInt32"
	uint16ValTag       valueTag = "UInt16"
	uint8ValTag        valueTag = "UInt8"
	int128ValTag       valueTag = "Int128"
	doubleValTag       valueTag = "Double"
	floatValTag        valueTag = "Float"
	dateValTag         valueTag = "Date"
	intervalValTag     valueTag = "Interval"
	timestampValTag    valueTag = "Timestamp"
	timestamptzValTag  valueTag = "TimestampTz"
	timestampnsValTag  valueTag = "TimestampNs"
	timestampmsValTag  valueTag = "TimestampMs"
	timestampsecValTag valueTag = "TimestampSec"
	internalidValTag   valueTag = "InternalID"
	stringValTag       valueTag = "String"
	blobValTag         valueTag = "Blob"
	listValTag         valueTag = "List"
	arrayValTag        valueTag = "Array"
	structValTag       valueTag = "Struct"
	nodeValTag         valueTag = "Node"
	relValTag          valueTag = "Rel"
	recursiverelValTag valueTag = "RecursiveRel"
	mapValTag          valueTag = "Map"
	unionValTag        valueTag = "Union"
	uuidValTag         valueTag = "UUID"
	decimalValTag      valueTag = "Decimal"
)

// In order to unmarshal types which have a field that is a general Value, we need to wrap it
// in an explicit type.
type valueUnmarshalHelper struct {
	Value
}

// the helper should marshal in the same way the inner type does
func (vh valueUnmarshalHelper) MarshalJSON() ([]byte, error) {
	return json.Marshal(vh.Value)
}

// In order to handle unmarshaling of values, we need to explicitly enumerate all possible tags.
func (vh *valueUnmarshalHelper) UnmarshalJSON(data []byte) error {
	var valueMap map[string]json.RawMessage
	err := json.Unmarshal(data, &valueMap)
	if err != nil {
		return err
	}

	if len(valueMap) != 1 {
		return fmt.Errorf("expected map of length 1 but got %d", len(valueMap))
	}

	for k := range valueMap {
		tag := valueTag(k)
		switch tag {
		case nullValTag:
			var value NullValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case boolValTag:
			var value BoolValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case int64ValTag:
			var value Int64Value
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case int32ValTag:
			var value Int32Value
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case int16ValTag:
			var value Int16Value
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case int8ValTag:
			var value Int8Value
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case uint64ValTag:
			var value UInt64Value
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case uint32ValTag:
			var value UInt32Value
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case uint16ValTag:
			var value UInt16Value
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case uint8ValTag:
			var value UInt8Value
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case int128ValTag:
			var value Int128Value
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case doubleValTag:
			var value DoubleValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case floatValTag:
			var value FloatValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case dateValTag:
			var value DateValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case intervalValTag:
			var value IntervalValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case timestampValTag:
			var value TimestampValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case timestamptzValTag:
			var value TimestampTzValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case timestampnsValTag:
			var value TimestampNsValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case timestampmsValTag:
			var value TimestampMsValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case timestampsecValTag:
			var value TimestampSecValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case internalidValTag:
			var value InternalIDValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case stringValTag:
			var value StringValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case blobValTag:
			var value BlobValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case listValTag:
			var value ListValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case arrayValTag:
			var value ArrayValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case structValTag:
			var value StructValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case nodeValTag:
			var value NodeValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case relValTag:
			var value RelValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case recursiverelValTag:
			var value RecursiveRelValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case mapValTag:
			var value MapValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case unionValTag:
			var value UnionValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case uuidValTag:
			var value UUIDValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		case decimalValTag:
			var value DecimalValue
			err := json.Unmarshal(data, &value)
			if err != nil {
				return err
			}
			vh.Value = value
			return nil
		default:
			return fmt.Errorf("unknown value tag %q", tag)
		}
	}
	panic("this should be unreachable")
}

func newValueUnmarshalHelper(v Value) valueUnmarshalHelper {
	return valueUnmarshalHelper{v}
}

func (v valueUnmarshalHelper) getInnerValue() Value {
	return v.Value
}

/* NULL */

type NullValue struct {
	LogicalType LogicalType `json:"logical_type"`
}

func (v NullValue) IsKuzuValue() {}
func (v NullValue) MarshalJSON() ([]byte, error) {
	intermediate := nullValue{
		LogicalType: newLogicalTypeHelper(v.LogicalType),
	}
	return json.Marshal(externallyTagged[nullValue]{&intermediate})
}
func (v *NullValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[nullValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = NullValue{
		LogicalType: logicalTypeUnmarshalHelper.getInnerLogicalType(intermediate.value.LogicalType),
	}
	return nil
}

type nullValue struct {
	LogicalType logicalTypeUnmarshalHelper `json:"logical_type"`
}

func (v nullValue) tag() string { return string(nullValTag) }
func (v nullValue) MarshalJSON() ([]byte, error) {
	var intermediate logicalTypeUnmarshalHelper
	intermediate = nullValue.getInnerLogicalType(v)
	return json.Marshal(intermediate)
}
func (v *nullValue) UnmarshalJSON(data []byte) error {
	var intermediate logicalTypeUnmarshalHelper
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = nullValueLogType(intermediate)
	return nil
}

/* BOOL */

type BoolValue bool

func (v BoolValue) IsKuzuValue() {}
func (v BoolValue) MarshalJSON() ([]byte, error) {
	intermediate := boolValue(v)
	return json.Marshal(externallyTagged[boolValue]{&intermediate})
}
func (v *BoolValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[boolValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = BoolValue(*intermediate.value)
	return nil
}

type boolValue BoolValue

func (v boolValue) tag() string { return string(boolValTag) }

/* INT64 */

type Int64Value int64

func (v Int64Value) IsKuzuValue() {}
func (v Int64Value) MarshalJSON() ([]byte, error) {
	intermediate := int64Value(v)
	return json.Marshal(externallyTagged[int64Value]{&intermediate})
}
func (v *Int64Value) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[int64Value]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = Int64Value(*intermediate.value)
	return nil
}

type int64Value Int64Value

func (v int64Value) tag() string { return string(int64ValTag) }

/* INT32 */

type Int32Value int32

func (v Int32Value) IsKuzuValue() {}
func (v Int32Value) MarshalJSON() ([]byte, error) {
	intermediate := int32Value(v)
	return json.Marshal(externallyTagged[int32Value]{&intermediate})
}
func (v *Int32Value) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[int32Value]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = Int32Value(*intermediate.value)
	return nil
}

type int32Value Int32Value

func (v int32Value) tag() string { return string(int32ValTag) }

/* INT16 */

type Int16Value int16

func (v Int16Value) IsKuzuValue() {}
func (v Int16Value) MarshalJSON() ([]byte, error) {
	intermediate := int16Value(v)
	return json.Marshal(externallyTagged[int16Value]{&intermediate})
}
func (v *Int16Value) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[int16Value]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = Int16Value(*intermediate.value)
	return nil
}

type int16Value Int16Value

func (v int16Value) tag() string { return string(int16ValTag) }

/* INT8 */

type Int8Value int8

func (v Int8Value) IsKuzuValue() {}
func (v Int8Value) MarshalJSON() ([]byte, error) {
	intermediate := int8Value(v)
	return json.Marshal(externallyTagged[int8Value]{&intermediate})
}
func (v *Int8Value) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[int8Value]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = Int8Value(*intermediate.value)
	return nil
}

type int8Value Int8Value

func (v int8Value) tag() string { return string(int8ValTag) }

/* UINT64 */

type UInt64Value uint64

func (v UInt64Value) IsKuzuValue() {}
func (v UInt64Value) MarshalJSON() ([]byte, error) {
	intermediate := uint64Value(v)
	return json.Marshal(externallyTagged[uint64Value]{&intermediate})
}
func (v *UInt64Value) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[uint64Value]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = UInt64Value(*intermediate.value)
	return nil
}

type uint64Value UInt64Value

func (v uint64Value) tag() string { return string(uint64ValTag) }

/* UINT32 */

type UInt32Value uint32

func (v UInt32Value) IsKuzuValue() {}
func (v UInt32Value) MarshalJSON() ([]byte, error) {
	intermediate := uint32Value(v)
	return json.Marshal(externallyTagged[uint32Value]{&intermediate})
}
func (v *UInt32Value) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[uint32Value]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = UInt32Value(*intermediate.value)
	return nil
}

type uint32Value UInt32Value

func (v uint32Value) tag() string { return string(uint32ValTag) }

/* UINT16 */

type UInt16Value uint16

func (v UInt16Value) IsKuzuValue() {}
func (v UInt16Value) MarshalJSON() ([]byte, error) {
	intermediate := uint16Value(v)
	return json.Marshal(externallyTagged[uint16Value]{&intermediate})
}
func (v *UInt16Value) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[uint16Value]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = UInt16Value(*intermediate.value)
	return nil
}

type uint16Value UInt16Value

func (v uint16Value) tag() string { return string(uint16ValTag) }

/* UINT8 */

type UInt8Value uint8

func (v UInt8Value) IsKuzuValue() {}
func (v UInt8Value) MarshalJSON() ([]byte, error) {
	intermediate := uint8Value(v)
	return json.Marshal(externallyTagged[uint8Value]{&intermediate})
}
func (v *UInt8Value) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[uint8Value]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = UInt8Value(*intermediate.value)
	return nil
}

type uint8Value UInt8Value

func (v uint8Value) tag() string { return string(uint8ValTag) }

/* INT128 */

type Int128Value int64

func (v Int128Value) IsKuzuValue() {}
func (v Int128Value) MarshalJSON() ([]byte, error) {
	intermediate := int128Value(v)
	return json.Marshal(externallyTagged[int128Value]{&intermediate})
}
func (v *Int128Value) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[int128Value]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = Int128Value(*intermediate.value)
	return nil
}

type int128Value Int128Value

func (v int128Value) tag() string { return string(int128ValTag) }

/* DOUBLE */

type DoubleValue float64

func (v DoubleValue) IsKuzuValue() {}
func (v DoubleValue) MarshalJSON() ([]byte, error) {
	intermediate := doubleValue(v)
	return json.Marshal(externallyTagged[doubleValue]{&intermediate})
}
func (v *DoubleValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[doubleValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = DoubleValue(*intermediate.value)
	return nil
}

type doubleValue DoubleValue

func (v doubleValue) tag() string { return string(doubleValTag) }

/* FLOAT */

type FloatValue float32

func (v FloatValue) IsKuzuValue() {}
func (v FloatValue) MarshalJSON() ([]byte, error) {
	intermediate := floatValue(v)
	return json.Marshal(externallyTagged[floatValue]{&intermediate})
}
func (v *FloatValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[floatValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = FloatValue(*intermediate.value)
	return nil
}

type floatValue FloatValue

func (v floatValue) tag() string { return string(floatValTag) }

/* DATE */

type DateValue civil.Date

func (v DateValue) IsKuzuValue() {}
func (v DateValue) MarshalJSON() ([]byte, error) {
	intermediate := dateValue(v)
	return json.Marshal(externallyTagged[dateValue]{&intermediate})
}
func (v *DateValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[dateValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = DateValue(*intermediate.value)
	return nil
}

type dateValue DateValue

func (v dateValue) tag() string { return string(dateValTag) }
func (v dateValue) MarshalJSON() ([]byte, error) {
	var intermediate civil.Date
	intermediate = civil.Date(v)
	return json.Marshal(intermediate)
}
func (v *dateValue) UnmarshalJSON(data []byte) error {
	var intermediate civil.Date
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = dateValue(intermediate)
	return nil
}

/* INTERVAL */

type IntervalValue time.Duration

func (v IntervalValue) IsKuzuValue() {}
func (v IntervalValue) MarshalJSON() ([]byte, error) {
	intermediate := intervalValue(v)
	return json.Marshal(externallyTagged[intervalValue]{&intermediate})
}
func (v *IntervalValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[intervalValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = IntervalValue(*intermediate.value)
	return nil
}

type intervalValue IntervalValue

func (v intervalValue) tag() string { return string(intervalValTag) }
func (v intervalValue) MarshalJSON() ([]byte, error) {
	var intermediate intervalValueJson
	intermediate = intervalValueJson(v)
	return json.Marshal(intermediate)
}
func (v *intervalValue) UnmarshalJSON(data []byte) error {
	var intermediate intervalValueJson
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = intervalValue(intermediate)
	return nil
}

/* TIMESTAMP */

type TimestampValue time.Time

func (v TimestampValue) IsKuzuValue() {}
func (v TimestampValue) MarshalJSON() ([]byte, error) {
	intermediate := timestampValue(v)
	return json.Marshal(externallyTagged[timestampValue]{&intermediate})
}
func (v *TimestampValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[timestampValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = TimestampValue(*intermediate.value)
	return nil
}

type timestampValue TimestampValue

func (v timestampValue) tag() string { return string(timestampValTag) }
func (v timestampValue) MarshalJSON() ([]byte, error) {
	var intermediate rfc3339NanoTime
	intermediate = rfc3339NanoTime(v)
	return json.Marshal(intermediate)
}
func (v *timestampValue) UnmarshalJSON(data []byte) error {
	var intermediate rfc3339NanoTime
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = timestampValue(intermediate)
	return nil
}

/* TIMESTAMPTZ */

type TimestampTzValue time.Time

func (v TimestampTzValue) IsKuzuValue() {}
func (v TimestampTzValue) MarshalJSON() ([]byte, error) {
	intermediate := timestamptzValue(v)
	return json.Marshal(externallyTagged[timestamptzValue]{&intermediate})
}
func (v *TimestampTzValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[timestamptzValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = TimestampTzValue(*intermediate.value)
	return nil
}

type timestamptzValue TimestampTzValue

func (v timestamptzValue) tag() string { return string(timestamptzValTag) }
func (v timestamptzValue) MarshalJSON() ([]byte, error) {
	var intermediate rfc3339NanoTime
	intermediate = rfc3339NanoTime(v)
	return json.Marshal(intermediate)
}
func (v *timestamptzValue) UnmarshalJSON(data []byte) error {
	var intermediate rfc3339NanoTime
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = timestamptzValue(intermediate)
	return nil
}

/* TIMESTAMPNS */

type TimestampNsValue time.Time

func (v TimestampNsValue) IsKuzuValue() {}
func (v TimestampNsValue) MarshalJSON() ([]byte, error) {
	intermediate := timestampnsValue(v)
	return json.Marshal(externallyTagged[timestampnsValue]{&intermediate})
}
func (v *TimestampNsValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[timestampnsValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = TimestampNsValue(*intermediate.value)
	return nil
}

type timestampnsValue TimestampNsValue

func (v timestampnsValue) tag() string { return string(timestampnsValTag) }
func (v timestampnsValue) MarshalJSON() ([]byte, error) {
	var intermediate rfc3339NanoTime
	intermediate = rfc3339NanoTime(v)
	return json.Marshal(intermediate)
}
func (v *timestampnsValue) UnmarshalJSON(data []byte) error {
	var intermediate rfc3339NanoTime
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = timestampnsValue(intermediate)
	return nil
}

/* TIMESTAMPMS */

type TimestampMsValue time.Time

func (v TimestampMsValue) IsKuzuValue() {}
func (v TimestampMsValue) MarshalJSON() ([]byte, error) {
	intermediate := timestampmsValue(v)
	return json.Marshal(externallyTagged[timestampmsValue]{&intermediate})
}
func (v *TimestampMsValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[timestampmsValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = TimestampMsValue(*intermediate.value)
	return nil
}

type timestampmsValue TimestampMsValue

func (v timestampmsValue) tag() string { return string(timestampmsValTag) }
func (v timestampmsValue) MarshalJSON() ([]byte, error) {
	var intermediate rfc3339NanoTime
	intermediate = rfc3339NanoTime(v)
	return json.Marshal(intermediate)
}
func (v *timestampmsValue) UnmarshalJSON(data []byte) error {
	var intermediate rfc3339NanoTime
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = timestampmsValue(intermediate)
	return nil
}

/* TIMESTAMPSEC */

type TimestampSecValue time.Time

func (v TimestampSecValue) IsKuzuValue() {}
func (v TimestampSecValue) MarshalJSON() ([]byte, error) {
	intermediate := timestampsecValue(v)
	return json.Marshal(externallyTagged[timestampsecValue]{&intermediate})
}
func (v *TimestampSecValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[timestampsecValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = TimestampSecValue(*intermediate.value)
	return nil
}

type timestampsecValue TimestampSecValue

func (v timestampsecValue) tag() string { return string(timestampsecValTag) }
func (v timestampsecValue) MarshalJSON() ([]byte, error) {
	var intermediate rfc3339NanoTime
	intermediate = rfc3339NanoTime(v)
	return json.Marshal(intermediate)
}
func (v *timestampsecValue) UnmarshalJSON(data []byte) error {
	var intermediate rfc3339NanoTime
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = timestampsecValue(intermediate)
	return nil
}

/* INTERNALID */

type InternalIDValue InternalID

func (v InternalIDValue) IsKuzuValue() {}
func (v InternalIDValue) MarshalJSON() ([]byte, error) {
	intermediate := internalidValue(v)
	return json.Marshal(externallyTagged[internalidValue]{&intermediate})
}
func (v *InternalIDValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[internalidValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = InternalIDValue(*intermediate.value)
	return nil
}

type internalidValue InternalIDValue

func (v internalidValue) tag() string { return string(internalidValTag) }

/* STRING */

type StringValue string

func (v StringValue) IsKuzuValue() {}
func (v StringValue) MarshalJSON() ([]byte, error) {
	intermediate := stringValue(v)
	return json.Marshal(externallyTagged[stringValue]{&intermediate})
}
func (v *StringValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[stringValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = StringValue(*intermediate.value)
	return nil
}

type stringValue StringValue

func (v stringValue) tag() string { return string(stringValTag) }

/* BLOB */

type BlobValue []uint8

func (v BlobValue) IsKuzuValue() {}
func (v BlobValue) MarshalJSON() ([]byte, error) {
	intermediate := blobValue(v)
	return json.Marshal(externallyTagged[blobValue]{&intermediate})
}
func (v *BlobValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[blobValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = BlobValue(*intermediate.value)
	return nil
}

type blobValue BlobValue

func (v blobValue) tag() string { return string(blobValTag) }
func (v blobValue) MarshalJSON() ([]byte, error) {
	var intermediate blobValueJson
	intermediate = blobValueJson(v)
	return json.Marshal(intermediate)
}
func (v *blobValue) UnmarshalJSON(data []byte) error {
	var intermediate blobValueJson
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = []uint8(intermediate)
	return nil
}

/* LIST */

type ListValue struct {
	LogicalType LogicalType `json:"logical_type"`
	Values      []Value     `json:"values"`
}

func (v ListValue) IsKuzuValue() {}
func (v ListValue) MarshalJSON() ([]byte, error) {
	intermediate := listValue{
		LogicalType: newLogicalTypeHelper(v.LogicalType),
		Values:      v.Values,
	}
	return json.Marshal(externallyTagged[listValue]{&intermediate})
}
func (v *ListValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[listValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = ListValue{
		LogicalType: logicalTypeUnmarshalHelper.getInnerLogicalType(intermediate.value.LogicalType),
		Values:      intermediate.value.Values,
	}
	return nil
}

type listValue struct {
	LogicalType logicalTypeUnmarshalHelper `json:"logical_type"`
	Values      valueArrayJson             `json:"values"`
}

func (v listValue) tag() string { return string(listValTag) }
func (v listValue) MarshalJSON() ([]byte, error) {
	var intermediate typedValuesTwople
	intermediate = typedValuesTwopleFromList(v)
	return json.Marshal(intermediate)
}
func (v *listValue) UnmarshalJSON(data []byte) error {
	var intermediate typedValuesTwople
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = typedValuesTwople.toList(intermediate)
	return nil
}

/* ARRAY */

type ArrayValue struct {
	LogicalType LogicalType `json:"logical_type"`
	Values      []Value     `json:"values"`
}

func (v ArrayValue) IsKuzuValue() {}
func (v ArrayValue) MarshalJSON() ([]byte, error) {
	intermediate := arrayValue{
		LogicalType: newLogicalTypeHelper(v.LogicalType),
		Values:      v.Values,
	}
	return json.Marshal(externallyTagged[arrayValue]{&intermediate})
}
func (v *ArrayValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[arrayValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = ArrayValue{
		LogicalType: logicalTypeUnmarshalHelper.getInnerLogicalType(intermediate.value.LogicalType),
		Values:      intermediate.value.Values,
	}
	return nil
}

type arrayValue struct {
	LogicalType logicalTypeUnmarshalHelper `json:"logical_type"`
	Values      valueArrayJson             `json:"values"`
}

func (v arrayValue) tag() string { return string(arrayValTag) }
func (v arrayValue) MarshalJSON() ([]byte, error) {
	var intermediate typedValuesTwople
	intermediate = typedValuesTwopleFromArray(v)
	return json.Marshal(intermediate)
}
func (v *arrayValue) UnmarshalJSON(data []byte) error {
	var intermediate typedValuesTwople
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = typedValuesTwople.toArray(intermediate)
	return nil
}

/* STRUCT */

type StructValue map[string]Value

func (v StructValue) IsKuzuValue() {}
func (v StructValue) MarshalJSON() ([]byte, error) {
	intermediate := structValue(v)
	return json.Marshal(externallyTagged[structValue]{&intermediate})
}
func (v *StructValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[structValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = StructValue(*intermediate.value)
	return nil
}

type structValue StructValue

func (v structValue) tag() string { return string(structValTag) }
func (v structValue) MarshalJSON() ([]byte, error) {
	var intermediate namedFieldsTwoples
	intermediate = namedFieldsTwoplesFromMap(v)
	return json.Marshal(intermediate)
}
func (v *structValue) UnmarshalJSON(data []byte) error {
	var intermediate namedFieldsTwoples
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = namedFieldsTwoples.toMap(intermediate)
	return nil
}

/* NODE */

type NodeValue struct {
	ID         InternalID       `json:"id"`
	Label      string           `json:"label"`
	Properties map[string]Value `json:"properties"`
}

func (v NodeValue) IsKuzuValue() {}
func (v NodeValue) MarshalJSON() ([]byte, error) {
	intermediate := nodeValue{
		ID:         v.ID,
		Label:      v.Label,
		Properties: namedFieldsTwoplesFromMap(v.Properties),
	}
	return json.Marshal(externallyTagged[nodeValue]{&intermediate})
}
func (v *NodeValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[nodeValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = NodeValue{
		ID:         intermediate.value.ID,
		Label:      intermediate.value.Label,
		Properties: namedFieldsTwoples.toMap(intermediate.value.Properties),
	}
	return nil
}

type nodeValue struct {
	ID         InternalID         `json:"id"`
	Label      string             `json:"label"`
	Properties namedFieldsTwoples `json:"properties"`
}

func (v nodeValue) tag() string { return string(nodeValTag) }

/* REL */

type RelValue struct {
	SrcNode    InternalID       `json:"src_node"`
	DstNode    InternalID       `json:"dst_node"`
	Label      string           `json:"label"`
	Properties map[string]Value `json:"properties"`
}

func (v RelValue) IsKuzuValue() {}
func (v RelValue) MarshalJSON() ([]byte, error) {
	intermediate := relValue{
		SrcNode:    v.SrcNode,
		DstNode:    v.DstNode,
		Label:      v.Label,
		Properties: namedFieldsTwoplesFromMap(v.Properties),
	}
	return json.Marshal(externallyTagged[relValue]{&intermediate})
}
func (v *RelValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[relValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = RelValue{
		SrcNode:    intermediate.value.SrcNode,
		DstNode:    intermediate.value.DstNode,
		Label:      intermediate.value.Label,
		Properties: namedFieldsTwoples.toMap(intermediate.value.Properties),
	}
	return nil
}

type relValue struct {
	SrcNode    InternalID         `json:"src_node"`
	DstNode    InternalID         `json:"dst_node"`
	Label      string             `json:"label"`
	Properties namedFieldsTwoples `json:"properties"`
}

func (v relValue) tag() string { return string(relValTag) }

/* RECURSIVEREL */

type RecursiveRelValue struct {
	Nodes []NodeValue `json:"nodes"`
	Rels  []RelValue  `json:"rels"`
}

func (v RecursiveRelValue) IsKuzuValue() {}
func (v RecursiveRelValue) MarshalJSON() ([]byte, error) {
	intermediate := recursiverelValue{
		Nodes: v.Nodes,
		Rels:  v.Rels,
	}
	return json.Marshal(externallyTagged[recursiverelValue]{&intermediate})
}
func (v *RecursiveRelValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[recursiverelValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = RecursiveRelValue{
		Nodes: intermediate.value.Nodes,
		Rels:  intermediate.value.Rels,
	}
	return nil
}

type recursiverelValue struct {
	Nodes []NodeValue `json:"nodes"`
	Rels  []RelValue  `json:"rels"`
}

func (v recursiverelValue) tag() string { return string(recursiverelValTag) }

/* MAP */

type MapValue struct {
	KeyType   LogicalType     `json:"key_type"`
	ValueType LogicalType     `json:"value_type"`
	Pairs     map[Value]Value `json:"pairs"`
}

func (v MapValue) IsKuzuValue() {}
func (v MapValue) MarshalJSON() ([]byte, error) {
	intermediate := mapValue{
		KeyType:   newLogicalTypeHelper(v.KeyType),
		ValueType: newLogicalTypeHelper(v.ValueType),
		Pairs:     valueMapJson(v.Pairs),
	}
	return json.Marshal(externallyTagged[mapValue]{&intermediate})
}
func (v *MapValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[mapValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = MapValue{
		KeyType:   logicalTypeUnmarshalHelper.getInnerLogicalType(intermediate.value.KeyType),
		ValueType: logicalTypeUnmarshalHelper.getInnerLogicalType(intermediate.value.ValueType),
		Pairs:     map[Value]Value(intermediate.value.Pairs),
	}
	return nil
}

type mapValue struct {
	KeyType   logicalTypeUnmarshalHelper `json:"key_type"`
	ValueType logicalTypeUnmarshalHelper `json:"value_type"`
	Pairs     valueMapJson               `json:"pairs"`
}

func (v mapValue) tag() string { return string(mapValTag) }
func (v mapValue) MarshalJSON() ([]byte, error) {
	var intermediate mapValueJson
	intermediate = mapValueJson(v)
	return json.Marshal(intermediate)
}
func (v *mapValue) UnmarshalJSON(data []byte) error {
	var intermediate mapValueJson
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = mapValue(intermediate)
	return nil
}

/* UNION */

type UnionValue struct {
	Types map[string]LogicalType `json:"types"`
	Value Value                  `json:"value"`
}

func (v UnionValue) IsKuzuValue() {}
func (v UnionValue) MarshalJSON() ([]byte, error) {
	intermediate := unionValue{
		Types: namedTypesTwoplesFromMap(v.Types),
		Value: newValueUnmarshalHelper(v.Value),
	}
	return json.Marshal(externallyTagged[unionValue]{&intermediate})
}
func (v *UnionValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[unionValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = UnionValue{
		Types: namedTypesTwoples.toMap(intermediate.value.Types),
		Value: valueUnmarshalHelper.getInnerValue(intermediate.value.Value),
	}
	return nil
}

type unionValue struct {
	Types namedTypesTwoples    `json:"types"`
	Value valueUnmarshalHelper `json:"value"`
}

func (v unionValue) tag() string { return string(unionValTag) }

/* UUID */

type UUIDValue uuid.UUID

func (v UUIDValue) IsKuzuValue() {}
func (v UUIDValue) MarshalJSON() ([]byte, error) {
	intermediate := uuidValue(v)
	return json.Marshal(externallyTagged[uuidValue]{&intermediate})
}
func (v *UUIDValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[uuidValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = UUIDValue(*intermediate.value)
	return nil
}

type uuidValue UUIDValue

func (v uuidValue) tag() string { return string(uuidValTag) }
func (v uuidValue) MarshalJSON() ([]byte, error) {
	var intermediate uuid.UUID
	intermediate = uuid.UUID(v)
	return json.Marshal(intermediate)
}
func (v *uuidValue) UnmarshalJSON(data []byte) error {
	var intermediate uuid.UUID
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = uuidValue(intermediate)
	return nil
}

/* DECIMAL */

type DecimalValue decimal.Decimal

func (v DecimalValue) IsKuzuValue() {}
func (v DecimalValue) MarshalJSON() ([]byte, error) {
	intermediate := decimalValue(v)
	return json.Marshal(externallyTagged[decimalValue]{&intermediate})
}
func (v *DecimalValue) UnmarshalJSON(data []byte) error {
	var intermediate externallyTagged[decimalValue]
	if err := json.Unmarshal(data, &intermediate); err != nil {
		return err
	}
	*v = DecimalValue(*intermediate.value)
	return nil
}

type decimalValue DecimalValue

func (v decimalValue) tag() string { return string(decimalValTag) }
func (v decimalValue) MarshalJSON() ([]byte, error) {
	var intermediate decimal.Decimal
	intermediate = decimal.Decimal(v)
	return json.Marshal(intermediate)
}
func (v *decimalValue) UnmarshalJSON(data []byte) error {
	var intermediate decimal.Decimal
	err := json.Unmarshal(data, &intermediate)
	if err != nil {
		return err
	}
	*v = decimalValue(intermediate)
	return nil
}
