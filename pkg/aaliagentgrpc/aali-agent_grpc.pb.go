// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc3
// source: pkg/aaliagentgrpc/aali-agent.proto

package aaliagentgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkflowRun_RunWorkflow_FullMethodName = "/aaliagentgrpc.WorkflowRun/RunWorkflow"
)

// WorkflowRunClient is the client API for WorkflowRun service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowRunClient interface {
	// Bidirectional streaming RPC
	RunWorkflow(ctx context.Context, opts ...grpc.CallOption) (WorkflowRun_RunWorkflowClient, error)
}

type workflowRunClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowRunClient(cc grpc.ClientConnInterface) WorkflowRunClient {
	return &workflowRunClient{cc}
}

func (c *workflowRunClient) RunWorkflow(ctx context.Context, opts ...grpc.CallOption) (WorkflowRun_RunWorkflowClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkflowRun_ServiceDesc.Streams[0], WorkflowRun_RunWorkflow_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowRunRunWorkflowClient{stream}
	return x, nil
}

type WorkflowRun_RunWorkflowClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type workflowRunRunWorkflowClient struct {
	grpc.ClientStream
}

func (x *workflowRunRunWorkflowClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workflowRunRunWorkflowClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkflowRunServer is the server API for WorkflowRun service.
// All implementations must embed UnimplementedWorkflowRunServer
// for forward compatibility
type WorkflowRunServer interface {
	// Bidirectional streaming RPC
	RunWorkflow(WorkflowRun_RunWorkflowServer) error
	mustEmbedUnimplementedWorkflowRunServer()
}

// UnimplementedWorkflowRunServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowRunServer struct {
}

func (UnimplementedWorkflowRunServer) RunWorkflow(WorkflowRun_RunWorkflowServer) error {
	return status.Errorf(codes.Unimplemented, "method RunWorkflow not implemented")
}
func (UnimplementedWorkflowRunServer) mustEmbedUnimplementedWorkflowRunServer() {}

// UnsafeWorkflowRunServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowRunServer will
// result in compilation errors.
type UnsafeWorkflowRunServer interface {
	mustEmbedUnimplementedWorkflowRunServer()
}

func RegisterWorkflowRunServer(s grpc.ServiceRegistrar, srv WorkflowRunServer) {
	s.RegisterService(&WorkflowRun_ServiceDesc, srv)
}

func _WorkflowRun_RunWorkflow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkflowRunServer).RunWorkflow(&workflowRunRunWorkflowServer{stream})
}

type WorkflowRun_RunWorkflowServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type workflowRunRunWorkflowServer struct {
	grpc.ServerStream
}

func (x *workflowRunRunWorkflowServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workflowRunRunWorkflowServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkflowRun_ServiceDesc is the grpc.ServiceDesc for WorkflowRun service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowRun_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aaliagentgrpc.WorkflowRun",
	HandlerType: (*WorkflowRunServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunWorkflow",
			Handler:       _WorkflowRun_RunWorkflow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/aaliagentgrpc/aali-agent.proto",
}
