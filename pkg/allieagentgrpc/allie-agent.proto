syntax = "proto3";

package allieagentgrpc;

option go_package = "./allieagentgrpc";

// WorkflowRun is a gRPC service that allows for running a workflow.
service WorkflowRun {
    // Bidirectional streaming RPC
    rpc RunWorkflow(stream ClientMessage) returns (stream ServerMessage) {}
}

// ClientMessage is the message sent by the client to the server.
message ClientMessage {
    oneof message_type {
        // Session context message to initiate a session
        SessionContext session_context = 1;

        // Client request message to send a request to the server
        ClientRequest client_request = 2;
    }
}

// ServerMessage is the message sent by the server to the client.
message ServerMessage {
    oneof message_type {
        // Connection status message to indicate the connection status after client sends a session context message
        ConnectionStatus connection_status = 1;

        // Authentication status message to indicate failing authentication after client sends a session context message with authentication enabled
        AuthenticationStatus authentication_status = 2;

        // Client response message to send a response to the client
        ClientResponse client_response = 3;
    }
}

// SessionContext is the message to initiate a session with the server.
message SessionContext {
    // JWT token for authentication
    string jwt_token = 1;

    // Workflow ID for the workflow to be run
    string workflow_id = 2;

    // Variables to be passed to the workflow
    map<string, string> variables = 3;
}

// ClientRequest is the message to send a request to the server.
message ClientRequest {
    // Instruction ID which has to be equal to the instruction ID of the client response for chat interface interaction
    string instruction_id = 1;

    // Type of the request; can be "message", "get_variable_values", "set_variable_values", "keepalive"
    string type = 2;

    // String input for chat interface interaction
    string input = 3;

    // Image input for chat interface interaction
    repeated string images = 4;

    // Variable values to be set for the workflow
    map<string, string> variable_values = 5;
}

// ConnectionStatus is the message to indicate the connection status after client sends a session context message.
message ConnectionStatus {
    // Connection status; can be "success", "failed"
    string connectionStatus = 1;
}

// AuthenticationStatus is the message to indicate failing authentication after client sends a session context message with authentication enabled.
message AuthenticationStatus {
    // Authentication status; can only be "failed"
    string authenticationStatus = 1;
}

// ClientResponse is the message to send a response to the client.
message ClientResponse {
    // Randomly generated instruction ID to be used in the client request
    string instruction_id = 1;

    // Type of the response; can be "message", "stream", "info_message", "info_stream", "error", "info", "varaible_values"
    string type = 2;

    // Chat Interface properties
    bool is_last = 3;
    uint32 position = 4;
    string chat_data = 5;
    string code_validation = 6; // "unvalidated", "valid", "warning", "invalid"
    int32 input_token_count = 7;
    int32 output_token_count = 8;
    string context = 9;

    // Variable values properties
    map<string, string> variable_values = 10;

    // Error properties
    ErrorResponse error = 11;

    // Info properties
    optional string info_message = 12;
}

// ErrorResponse is the message to send an error response to the client.
message ErrorResponse {
    // Error code
    int32 code = 1;

    // Error message
    string message = 2;
}
