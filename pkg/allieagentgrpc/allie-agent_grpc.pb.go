// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/allieagentgrpc/allie-agent.proto

package allieagentgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkflowRun_RunWorkflow_FullMethodName = "/allieagentgrpc.WorkflowRun/RunWorkflow"
)

// WorkflowRunClient is the client API for WorkflowRun service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WorkflowRun is a gRPC service that allows for running a workflow.
type WorkflowRunClient interface {
	// Bidirectional streaming RPC
	RunWorkflow(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error)
}

type workflowRunClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowRunClient(cc grpc.ClientConnInterface) WorkflowRunClient {
	return &workflowRunClient{cc}
}

func (c *workflowRunClient) RunWorkflow(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WorkflowRun_ServiceDesc.Streams[0], WorkflowRun_RunWorkflow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorkflowRun_RunWorkflowClient = grpc.BidiStreamingClient[ClientMessage, ServerMessage]

// WorkflowRunServer is the server API for WorkflowRun service.
// All implementations must embed UnimplementedWorkflowRunServer
// for forward compatibility.
//
// WorkflowRun is a gRPC service that allows for running a workflow.
type WorkflowRunServer interface {
	// Bidirectional streaming RPC
	RunWorkflow(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error
	mustEmbedUnimplementedWorkflowRunServer()
}

// UnimplementedWorkflowRunServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkflowRunServer struct{}

func (UnimplementedWorkflowRunServer) RunWorkflow(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method RunWorkflow not implemented")
}
func (UnimplementedWorkflowRunServer) mustEmbedUnimplementedWorkflowRunServer() {}
func (UnimplementedWorkflowRunServer) testEmbeddedByValue()                     {}

// UnsafeWorkflowRunServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowRunServer will
// result in compilation errors.
type UnsafeWorkflowRunServer interface {
	mustEmbedUnimplementedWorkflowRunServer()
}

func RegisterWorkflowRunServer(s grpc.ServiceRegistrar, srv WorkflowRunServer) {
	// If the following call pancis, it indicates UnimplementedWorkflowRunServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkflowRun_ServiceDesc, srv)
}

func _WorkflowRun_RunWorkflow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkflowRunServer).RunWorkflow(&grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorkflowRun_RunWorkflowServer = grpc.BidiStreamingServer[ClientMessage, ServerMessage]

// WorkflowRun_ServiceDesc is the grpc.ServiceDesc for WorkflowRun service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowRun_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "allieagentgrpc.WorkflowRun",
	HandlerType: (*WorkflowRunServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunWorkflow",
			Handler:       _WorkflowRun_RunWorkflow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/allieagentgrpc/allie-agent.proto",
}
