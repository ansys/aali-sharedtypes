[{"objectID":"Home","href":"user-guide/function_definitions.html#function-definitions","title":"Function Definitions","text":"Function Definitions\n\nStructs for Registered Functions\n\nThese structs describe available functions and their signatures:\n\nFunctionDefinition\n\nFunctionInput\n\nFunctionOutput\n\nFunctionMetadata\n\nThey are registered with Flowkit and referenced across LLM and Agent components."},{"objectID":"Home","href":"advanced/api_reference.html#api-reference","title":"API Reference","text":"API Reference\n\nPublic Structs and Packages\n\nSharedTypes exposes the following key packages:\n\npkg/sharedtypes — core workflow, function, and result types\n\npkg/config — runtime config definitions\n\npkg/aali_graphdb — logical types and graph values\n\nExample Struct: ExecutionResult\n\nReturned by agents and services to describe outcome of a task.\n\nExample Struct: FunctionDefinition\n\nUsed to describe callable functions shared across services.\n\nThis page is a placeholder for future auto-generated Go API documentation."},{"objectID":"Home","href":"advanced/service_integration.html#service-integration","title":"Service Integration","text":"Service Integration\n\nSharedTypes Across Services\n\nSharedTypes is used by Agent, Flowkit, LLM, and Chat. Each of these services imports the module to:\n\nReuse workflow and execution structs\n\nAccess common function metadata\n\nStandardize input/output handling\n\nThis approach eliminates duplication and ensures consistency between services."},{"objectID":"Home","href":"user-guide/execution_results.html#execution-results","title":"Execution Results","text":"Execution Results\n\nResult and Status Structs\n\nSharedTypes includes unified output and status structs to represent results of tasks:\n\nExecutionResult\n\nExecutionStatus\n\nErrorReport\n\nThese are used consistently across services to track results and errors in workflow execution."},{"objectID":"Home","href":"advanced/troubleshooting.html#integration-caveats","title":"Integration Caveats","text":"Integration Caveats\n\nCommon Pitfalls\n\nWatch for common issues when integrating SharedTypes into other services:\n\nStruct mismatch: Ensure your proto definitions align with the corresponding SharedTypes structs.\n\nImport cycles: Do not import service-specific logic back into SharedTypes.\n\nMarshalling errors: Validate struct field tags and default values, especially for JSON or proto conversions.\n\nMissing fields in GRPC response: Confirm that translation logic includes all necessary fields."},{"objectID":"Home","href":"user-guide/value_types.html#value-types","title":"Value Types","text":"Value Types\n\nLogical and Graph Values\n\nSharedTypes includes typed value structs used in GraphDB and internal processing:\n\nTypedValue\n\nLogicalType\n\nGraphValue\n\nThese types support dynamic input/output mapping and value tracking in workflows."},{"objectID":"Home","href":"user-guide/workflow_types.html#workflow-types","title":"Workflow Types","text":"Workflow Types\n\nWorkflow, Node, and Execution Structs\n\nThis group includes core structs for describing and managing workflows:\n\nWorkflowDefinition\n\nNodeDefinition\n\nNodeType\n\nExecutionContext\n\nExecutionStep\n\nThese types are used to define the structure of workflows and manage execution state across services."},{"objectID":"Home","href":"advanced/type_system.html#type-system-design","title":"Type System Design","text":"Type System Design\n\nDesign Principles\n\nThe type system in SharedTypes follows these principles:\n\nAvoid tight coupling to any backend (e.g., GRPC, protobuf)\n\nKeep structs small and focused\n\nUse typed enums and constants where possible\n\nAvoid deep nesting\n\nThis makes it easier to test, refactor, and extend data models across the system."},{"objectID":"Home","href":"user-guide/config_types.html#configuration-types","title":"Configuration Types","text":"Configuration Types\n\nShared Config Structs\n\nConfiguration models defined in SharedTypes are used to set runtime behavior. This includes:\n\nAgentConfig\n\nLoggingConfig\n\nLLMConfig\n\nThese structs are reused by various services to avoid duplicating config logic and ensure consistent setup."},{"objectID":"Home","href":"getting-started/setup.html#installation-and-setup","title":"Installation and Setup","text":"Installation and Setup\n\nClone the Repository\n\nClone the source code for local development.\n\nAdd as Dependency\n\nUse Go modules to install the sharedtypes package in your own service."},{"objectID":"Home","href":"advanced/index.html#advanced-topics","title":"Advanced Topics","text":"Advanced Topics\n\nOn how SharedTypes integrates into the AALI system.\n\n Service Integration\n\nHow SharedTypes is imported and used across Agent, LLM, and Flowkit.\n\nservice_integration\n\n GRPC & Protobuf Mapping\n\nMapping between internal structs and their corresponding proto definitions.\n\ngrpc_mapping\n\n Type System Design\n\nDesign decisions behind reusable, decoupled struct definitions.\n\ntype_system\n\n Troubleshooting\n\nCommon issues when using SharedTypes in external services.\n\ntroubleshooting\n\n API Reference\n\nFull list of exported types and interfaces.\n\napi_reference\n\n"},{"objectID":"Home","href":"advanced/grpc_mapping.html#grpc--protobuf-mapping","title":"GRPC & Protobuf Mapping","text":"GRPC & Protobuf Mapping\n\nStruct-to-Proto Translation\n\nWhile SharedTypes is not defined using protobuf, many structs are translated into proto messages before being sent across GRPC. Examples:\n\nExecutionResult → flowkitpb.ExecutionResult\n\nFunctionDefinition → flowkitpb.FunctionMeta\n\nTypedValue → graphpb.Value\n\nThe conversion logic is implemented in each service, keeping SharedTypes independent."},{"objectID":"Home","href":"user-guide/overview.html#overview","title":"Overview","text":"Overview\n\nShared Data Models\n\nSharedTypes provides a central set of Go structs used across AALI components. These include workflows, execution results, function definitions, graph values, and configuration types. Structs are designed to work independently from protobufs and GRPC.\n\nThis module is imported by Agent, Flowkit, LLM, and others to maintain a consistent internal representation of logic and data."},{"objectID":"Home","href":"index.html#aali-sharedtypes-documentation","title":"Aali SharedTypes Documentation","text":"Aali SharedTypes Documentation\n\nAali SharedTypes provides internal data models used across the AALI system. It defines structs such as Workflow, ExecutionResult, NodeDefinition, and others.\n\n\n\n Getting Started\n\nSetup instructions and module usage for local development.\n\ngetting-started/index\n\n User Guide\n\nCore structs for workflows, execution, configuration, values, and functions.\n\nuser-guide/index\n\n Advanced Topics\n\nIntegration patterns, GRPC mapping, internal struct design, and API reference.\n\nadvanced/index\n\n"},{"objectID":"Home","href":"user-guide/index.html#user-guide","title":"User Guide","text":"User Guide\n\nThe main data types defined in SharedTypes and how they are used across AALI services.\n\n\n\n Overview\n\nOverview of the core structs provided by SharedTypes.\n\noverview\n\n Workflow Types\n\nDefinitions for Workflow, Node, and Execution structures.\n\nworkflow_types\n\n Configuration Types\n\nShared configuration models used across services.\n\nconfig_types\n\n Value Types\n\nGraph values, logical types, and input/output modeling.\n\nvalue_types\n\n Function Definitions\n\nStructs related to registered functions and parameters.\n\nfunction_definitions\n\n Execution Results\n\nOutput and status structs shared by multiple components.\n\nexecution_results\n\n"},{"objectID":"Home","href":"getting-started/index.html#getting-started","title":"Getting Started","text":"Getting Started\n\nSet up and integrate the SharedTypes module into your project.\n\n Installation\n\nInstall the SharedTypes module and configure it in your Go project.\n\nsetup\n\n Module Usage\n\nImport SharedTypes and use its definitions in service code.\n\nmodule_usage\n\n"},{"objectID":"Home","href":"getting-started/module_usage.html#module-usage","title":"Module Usage","text":"Module Usage\n\nImport SharedTypes\n\nReference the shared structs from your Go code.\n\nExample: ExecutionResult\n\nCreate and populate shared types like ExecutionResult.\n\nExample: AgentConfig\n\nUse configuration structs from the same module."}]