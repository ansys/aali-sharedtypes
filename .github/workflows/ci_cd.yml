
name: GitHub CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: 'ansys.github.io/allie-sharedtypes'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
    - name: Install required tools
      run : |
        sudo apt-get update
        sudo apt-get install -y golang-go
        sudo apt-get install -y golang-golang-x-tools
        sudo snap install golangci-lint --classic

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python for pre-commit hook
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.MAIN_PYTHON_VERSION }}

    - name: Run pre-commit hook
      uses: pre-commit/action@v3.0.1

  build:
    name: Build project
    needs: [style]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache-dependency-path: 'go.sum'

    - name: Verify library builds
      run: |
        go build ./pkg/sharedtypes

  protoc:
    name: Create gRPC autogenerated files
    needs: [style]
    runs-on: ubuntu-latest
    env:
      PR_BRANCH: ${{ github.event.pull_request.head.ref }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PR_BRANCH }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: 'go.sum'

      - name: Install Protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc-gen-go and protoc-gen-go-grpc
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Add Go bin to PATH
        run: echo "${{ runner.tool_cache }}/go/bin" >> $GITHUB_PATH

      - name: Compile protofiles
        run: |
          protoc --go_out=pkg --go-grpc_out=pkg ./pkg/allieflowkitgrpc/allie-flowkit.proto
          protoc --go_out=pkg --go-grpc_out=pkg ./pkg/allieagentgrpc/allie-agent.proto
          go mod tidy
          go mod verify

      - name: Commit changes
        run: |
          # Configure git username & email
          git config user.name 'pyansys-ci-bot'
          git config user.email '92810346+pyansys-ci-bot@users.noreply.github.com'

          # Add autogenerated files to the branch
          git add .

          # Check if file was modified
          modified=`git diff HEAD --name-only`

          # If the file was modified, commit & push it to the branch
          if [ ! -z "$modified" ]; then
            echo "modified: $modified"
            # Commit and push fragment
            git commit -m "Adding autogenerated files"
            git push
          fi

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@v9
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Build project documentation"
    runs-on: ubuntu-latest
    steps:
      - name: "Build project documentation"
        uses: ansys/actions/doc-build@v9
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          skip-install: true
          requirements-file: doc/requirements.txt
          check-links: false

  doc-api-reference:
    name: "Build API reference documentation"
    needs: [doc-build, doc-style]
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Build GoPages
        run: |
          go install github.com/johnstarich/go/gopages@latest
          gopages -internal -source-link "https://github.com/ansys/allie-sharedtypes/blob/main/{{.Path}}{{if .Line}}#L{{.Line}}{{end}}"

      - name: Download HTML documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: documentation-html
          path: documentation-html

      - name: Run Python script
        run: python pkg/scripts/doc_api_reference.py ansys allie-sharedtypes

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html-with-api
          path: documentation-html

  release:
    name: Generate GitHub release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [doc-api-reference, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: false
          generate_release_notes: true

  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [doc-api-reference]
    steps:
      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@v9
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
          doc-artifact-name: documentation-html-with-api

  upload_docs_release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v9
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
          doc-artifact-name: documentation-html-with-api
