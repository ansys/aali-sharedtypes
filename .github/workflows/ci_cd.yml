
name: GitHub CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: 'ansys.github.io/aali-sharedtypes'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
    - name: Install required tools
      run : |
        sudo apt-get update
        sudo apt-get install -y golang-go golang-golang-x-tools
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Python for pre-commit hook
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.MAIN_PYTHON_VERSION }}

    - name: Run pre-commit hook
      uses: pre-commit/action@v3.0.1

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - run: go test $(go list ./pkg/... | grep -v 'aali_graphdb')  # run all the tests except for those in aali_graphdb (those are run below in separate job)

  get-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAMES: ${{ env.IMAGE_NAMES }}
    steps:
      - if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "IMAGE_NAMES=[\"${{ inputs.image_name }}\"]" | tee "$GITHUB_ENV"
      - if: ${{ github.event_name != 'workflow_dispatch' }}
        run: echo "IMAGE_NAMES=[\"ghcr.io/ansys/aali-graphdb:edge\", \"ghcr.io/ansys/aali-graphdb:latest\", \"ghcr.io/ansys/aali-graphdb:v1.0.0\"]" | tee "$GITHUB_ENV"

  graphdb-client-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image-name:
          - ghcr.io/ansys/aali-graphdb:edge
          - ghcr.io/ansys/aali-graphdb:latest
          - ghcr.io/ansys/aali-graphdb:v1.0.0
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          password: ${{ secrets.PYANSYS_CI_BOT_PACKAGE_TOKEN }}
      - run: docker pull ${{ matrix.image-name }}
      - run: go test -v ./pkg/aali_graphdb/... -imagename ${{ matrix.image-name }}

  build:
    name: Build project
    needs: [style]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache-dependency-path: 'go.sum'

    - name: Verify library builds
      run: |
        go build ./pkg/sharedtypes

  protoc:
    name: Create gRPC autogenerated files
    needs: [style]
    runs-on: ubuntu-latest
    env:
      PR_BRANCH: ${{ github.event.pull_request.head.ref }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ env.PR_BRANCH }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: 'go.sum'

      - name: Install Protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc-gen-go and protoc-gen-go-grpc
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Add Go bin to PATH
        run: echo "${{ runner.tool_cache }}/go/bin" >> $GITHUB_PATH

      - name: Compile protofiles
        run: |
          protoc --go_out=pkg --go-grpc_out=pkg ./pkg/aaliflowkitgrpc/aali-flowkit.proto
          protoc --go_out=pkg --go-grpc_out=pkg ./pkg/aaliagentgrpc/aali-agent.proto
          go mod tidy
          go mod verify

      - name: Commit changes
        run: |
          # Configure git username & email
          git config user.name 'pyansys-ci-bot'
          git config user.email '92810346+pyansys-ci-bot@users.noreply.github.com'

          # Add autogenerated files to the branch
          git add .

          # Check if file was modified
          modified=`git diff HEAD --name-only`

          # If the file was modified, commit & push it to the branch
          if [ ! -z "$modified" ]; then
            echo "modified: $modified"
            # Commit and push fragment
            git commit -m "Adding autogenerated files"
            git push
          fi

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@v10
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Build project documentation"
    runs-on: ubuntu-latest
    steps:
      - name: "Build project documentation"
        uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          skip-install: true
          requirements-file: doc/requirements.txt
          check-links: false

  doc-api-reference:
    name: "Build API reference documentation"
    needs: [doc-build, doc-style]
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Build GoPages
        run: |
          go install github.com/johnstarich/go/gopages@latest
          gopages -internal -source-link "https://github.com/ansys/aali-sharedtypes/blob/main/{{.Path}}{{if .Line}}#L{{.Line}}{{end}}"

      - name: Download HTML documentation artifacts
        uses: actions/download-artifact@v5
        with:
          name: documentation-html
          path: documentation-html

      - name: Run Python script
        run: python pkg/scripts/doc_api_reference.py ansys aali-sharedtypes

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html-with-api
          path: documentation-html

  release:
    name: Generate GitHub release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [doc-api-reference, build, unit-tests, graphdb-client-unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: false
          generate_release_notes: true
